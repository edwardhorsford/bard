# RUBY


- a dynamic, general-purpose, object-oriented language created in 1995 by Yukihiro Matsumoto. He created Ruby with the explicit goal of making a programming language that is readable by humans and fun for developers to work with.
- As an object-oriented language, everything in Ruby is an object and belongs to class. A class is an object from which other objects can inherit and overwrite values and methods. For example, the number 2 is an object belonging to the Fixnum class. Fixnum, itself is an object, that extends from the Class class.

## IRB & Pry

- Interactive Ruby
- It is most commonly used to test the outcome of code.
- Every time you enter IRB, you are creating a new session, in which Ruby will store the values and state of any variables and classes you create.
- Pry is a community-created wrapper for IRB that provides additional features, syntax highlighting, state navigation, and runtime invocation, which is handy for debugging applications
- When a method is called on an object, such as `2.class`, if there are multiple methods with the same name, Pry will prompt the user for which one they would like to execute

## Common Methods

### puts
- This method will write to the terminal the value that comes after it. For example, if you were to execute `puts 2 + 2 `, 4 will be written to the terminal.

### gets
- This method halts the execution of an application and wait for user input. It will stop waiting when the user presses the carriage return key. It is used to capture user input in command line applications.
##### Example 
` x = gets ` [ This wil assign the user's input to the variable x ]

### .class
- Returns the class of the object upon which it is called
##### Example
```
 2.class //Fixnum
```
```
10.34.class //Float
```
```
'Gerry'.class //String 
```

### .include?
- This method will check to see if the argument is present in the value the method is called on.
##### Example
` [1,2,3].include?(2) // true `  
` "cj".include?("c") // true `  
` [4,5,6].include?("j") // false `  

### .strip
- This method will return the value of a string with the whitespace from the end removed.
#### Note: This method does not change the value of the string.
##### Example
` "meow          ".strip //  "meow" `

### !
- If you call an exclamation point after a method name, this will make a permanent change to the value the method is called upon.
##### Example
` z = "meow          " `  
` z.strip! `  
` z == "meow" // true `


### .concat
- This method will combine two strings together.
##### Example
` "ROFL".concat("copter") // "ROFLcopter" `

## Time

### now
```
Time.now
```

This returns the current time

### strftime
```
Time.now.strftime '%Y %B' // '2014 January'
Time.now.strftime '%B %Y' // 'January 2014'
```
This method stands for 'string format time'. It takes a string containing matchers that are found in the Ruby documentation and will return a string representing the attributes of a Time instance that are in the string passed to the method.

